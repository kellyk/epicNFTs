{"ast":null,"code":"var _jsxFileName = \"/Users/kking/Documents/Personal/code/epic-nfts-client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from './utils/MyEpicNFT.json';\nimport loading from \"./loading.svg\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'kng';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst CONTRACT_ADDRESS = \"0xed23Fc811e3D16aEBd82f5ff6FE7D0A4f9b9f2A6\";\nconst TOTAL_MINT_COUNT = 50;\n\nfunction parseEthNetworkToStr(id) {\n  const ETH_NETWORKS = {\n    \"1\": \"Mainnet\",\n    \"42\": \"Kovan\",\n    \"3\": \"Ropsten\",\n    \"4\": \"Rinkeby\",\n    \"5\": \"Goerli\"\n  };\n\n  if (ETH_NETWORKS.hasOwnProperty(id)) {\n    return ETH_NETWORKS[id];\n  } else {\n    return `Unknown network (${id})`;\n  }\n}\n\n;\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = React.useState(\"\");\n  const [svg, setSVG] = React.useState();\n  const [tokenId, setTokenId] = React.useState();\n  const [isMinting, setIsMinting] = React.useState(false);\n  const [ethNetwork, setEthNetwork] = React.useState();\n  const OPENSEA_LINK = `https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId}`;\n\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer); // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId, finalSVG) => {\n          console.log(from, tokenId.toNumber());\n          setSVG(finalSVG);\n          setTokenId(tokenId.toNumber());\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = () => {\n    /*\n    * First make sure we have access to window.ethereum\n    */\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      const network = ethereum.networkVersion;\n      console.log({\n        network\n      });\n      setEthNetwork(parseEthNetworkToStr(ethereum.networkVersion));\n      console.log(\"We have the ethereum object\", ethereum, ethereum.networkVersion);\n    }\n\n    ethereum.request({\n      method: 'eth_accounts'\n    }).then(accounts => {\n      if (accounts.length) {\n        const account = accounts[0];\n        setCurrentAccount(account);\n        console.log('Found an authorized account: ', account);\n        setupEventListener();\n      } else {\n        console.log('No authorized account found.');\n      }\n    });\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      setIsMinting(true);\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n\n      setIsMinting(false);\n    } catch (error) {\n      console.log(error);\n      setIsMinting(false);\n    }\n  };\n\n  React.useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []); // Render Methods\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n\n  const renderMintUI = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: askContractToMintNft,\n    className: \"cta-button connect-wallet-button\",\n    children: isMinting ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Minting...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 46\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n\n  const renderNetworkWarning = () => /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"warning\",\n    children: `Hey â€” I see you're connected to ${ethNetwork} but this only works on Rinkeby!`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n\n  const svgUri = `data:image/svg+xml;utf8,${svg}`;\n  console.log({\n    svg\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"My NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each beautiful. Discover your NFT today.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), currentAccount ? renderMintUI() : renderNotConnectedContainer(), ethNetwork && ethNetwork !== \"Rinkeby\" ? renderNetworkWarning() : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), svg && !isMinting ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"svgContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          width: \"500px\",\n          src: svgUri,\n          alt: `NFT #${tokenId}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: OPENSEA_LINK,\n            children: \"View on OpenSea\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this) : isMinting ? /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"loading\",\n        src: loading,\n        alt: \"Loading spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 27\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built by @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"MGEQihlmF5vp9CgjOWEpfPJdEQ0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kking/Documents/Personal/code/epic-nfts-client/src/App.js"],"names":["React","ethers","myEpicNft","TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","TOTAL_MINT_COUNT","parseEthNetworkToStr","id","ETH_NETWORKS","hasOwnProperty","App","currentAccount","setCurrentAccount","useState","svg","setSVG","tokenId","setTokenId","isMinting","setIsMinting","ethNetwork","setEthNetwork","OPENSEA_LINK","setupEventListener","ethereum","window","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","on","from","finalSVG","console","log","toNumber","error","checkIfWalletIsConnected","network","networkVersion","request","method","then","accounts","length","account","connectWallet","alert","askContractToMintNft","nftTxn","makeAnEpicNFT","wait","hash","useEffect","renderNotConnectedContainer","renderMintUI","renderNetworkWarning","svgUri","loading","twitterLogo"],"mappings":"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","sourcesContent":["import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from './utils/MyEpicNFT.json'\nimport loading from './loading.svg';\n\n// Constants\nconst TWITTER_HANDLE = 'kng';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst CONTRACT_ADDRESS = \"0xed23Fc811e3D16aEBd82f5ff6FE7D0A4f9b9f2A6\";\nconst TOTAL_MINT_COUNT = 50;\n\nfunction parseEthNetworkToStr(id) {\n  const ETH_NETWORKS = {\n    \"1\": \"Mainnet\",\n    \"42\": \"Kovan\",\n    \"3\": \"Ropsten\",\n    \"4\": \"Rinkeby\",\n    \"5\": \"Goerli\",\n  };\n\n  if (ETH_NETWORKS.hasOwnProperty(id)) {\n    return ETH_NETWORKS[id];\n  } else {\n    return `Unknown network (${id})`;\n  }\n};\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = React.useState(\"\");\n  const [svg, setSVG] = React.useState();\n  const [tokenId, setTokenId] = React.useState();\n  const [isMinting, setIsMinting] = React.useState(false);\n  const [ethNetwork, setEthNetwork] = React.useState();\n\n  const OPENSEA_LINK = `https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId}`;\n\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId, finalSVG) => {\n          console.log(from, tokenId.toNumber())\n          setSVG(finalSVG);\n          setTokenId(tokenId.toNumber());\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  const checkIfWalletIsConnected = () => {\n    /*\n    * First make sure we have access to window.ethereum\n    */\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      const network = ethereum.networkVersion;\n      console.log({network})\n      setEthNetwork(parseEthNetworkToStr(ethereum.networkVersion));\n      console.log(\"We have the ethereum object\", ethereum, ethereum.networkVersion);\n    }\n\n    ethereum.request({ method: 'eth_accounts'})\n    .then(accounts => {\n      if (accounts.length) {\n        const account = accounts[0];\n        setCurrentAccount(account);\n        console.log('Found an authorized account: ', account);\n        setupEventListener();\n      } else {\n        console.log('No authorized account found.');\n      }\n    });\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    try {\n      setIsMinting(true);\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n      setIsMinting(false);\n    } catch (error) {\n      console.log(error);\n      setIsMinting(false);\n    }\n  }\n\n  React.useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n      {isMinting ? <span>Minting...</span> : <span>Mint NFT</span>}\n    </button>\n  );\n\n  const renderNetworkWarning = () => (\n    <p className=\"warning\">{`Hey â€” I see you're connected to ${ethNetwork} but this only works on Rinkeby!`}</p>\n  )\n\n  const svgUri = `data:image/svg+xml;utf8,${svg}`;\n  console.log({svg})\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount ? renderMintUI() : renderNotConnectedContainer()}\n          { ethNetwork && ethNetwork !== \"Rinkeby\" ? renderNetworkWarning(): null}\n        </div>\n        { svg && !isMinting ? (\n          <div className=\"svgContainer\">\n            <img width=\"500px\" src={svgUri} alt={`NFT #${tokenId}`} />\n            <p><a href={OPENSEA_LINK}>View on OpenSea</a>\n          </p></div>\n          ) : isMinting ? <img className=\"loading\" src={loading} alt=\"Loading spinner\" />: null }\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}